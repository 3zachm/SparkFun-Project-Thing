#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h> // needs Adafruit GFX
#include <Adafruit_SSD1306.h> // needs Adafruit SSD1306
#include <time.h> // needs Time
#include <TimeLib.h>
#include <Servo.h> // needs servo
#include <SparkFun_Qwiic_Scale_NAU7802_Arduino_Library.h> // needs that long name
//#include <EEPROM.h>

#define SCREEN_WIDTH 128 // width of screen
#define SCREEN_HEIGHT 32 // height of screen 
#define OLED_RESET 4 // reset pin # (-1 if sharing Arduino reset pin)
#define rSec 60 - t // lazy variable usage

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
Servo mainServo;
NAU7802 mainScale;

const int timerMin = 5;
int minT = 0;
bool fRun = true;
bool sixty = false;
bool tFin = false;
const unsigned char PROGMEM helloWorld[] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x1f, 0xf2, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xfe, 0x40, 0x01, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xfd, 0x27, 0xc9, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xfb, 0xa7, 0xc6, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xf1, 0x4f, 0xef, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xf7, 0xbf, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xe6, 0x77, 0xef, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xe6, 0xef, 0xe7, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xe6, 0xef, 0xf7, 0xef, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xdf, 0xff, 0xdf, 0xb6, 0xf8, 0x03, 0xff,
	0xce, 0xef, 0x53, 0x6f, 0xff, 0xef, 0xdf, 0xf7, 0xff, 0xdf, 0xf7, 0xdf, 0xb6, 0xfb, 0xbb, 0xff,
	0xce, 0xde, 0xbb, 0xaf, 0xf8, 0x1f, 0xbf, 0xf7, 0x06, 0x00, 0xef, 0xdf, 0xb6, 0xfb, 0xbb, 0xff,
	0xce, 0xdd, 0xb1, 0x9f, 0xff, 0x7f, 0xbf, 0xf7, 0xff, 0xdf, 0xee, 0x06, 0x00, 0x3b, 0xbb, 0xff,
	0xce, 0x98, 0x75, 0x9f, 0xfe, 0xff, 0x3f, 0xff, 0xff, 0xdf, 0xef, 0xdf, 0xb6, 0xfb, 0xbb, 0xff,
	0xce, 0x84, 0xf5, 0xbf, 0xfd, 0xff, 0x0f, 0xef, 0xff, 0xd1, 0xef, 0xdf, 0xb6, 0xf8, 0x03, 0xff,
	0xce, 0x1e, 0xf5, 0x0b, 0xfb, 0xff, 0x27, 0xef, 0x7f, 0x8e, 0xef, 0xdf, 0xb0, 0xfc, 0xef, 0xff,
	0xce, 0x5c, 0xf5, 0x25, 0xfb, 0xfe, 0x77, 0xab, 0xff, 0xbf, 0x67, 0x1f, 0xb6, 0xfa, 0xe3, 0xff,
	0xce, 0xdf, 0xfc, 0xaf, 0xfb, 0xfe, 0xf7, 0x67, 0x7f, 0xff, 0x66, 0x4f, 0xbf, 0xf6, 0xed, 0xff,
	0xce, 0xe7, 0xf9, 0xbf, 0xf8, 0x06, 0xf2, 0x77, 0x07, 0xfe, 0xe6, 0xd7, 0xbf, 0xfc, 0xef, 0xff,
	0xcf, 0x7b, 0xfb, 0x6f, 0xff, 0xfd, 0xf8, 0xf7, 0xff, 0xc1, 0xfe, 0x1f, 0x80, 0x39, 0xef, 0xff,
	0xcf, 0x77, 0xf4, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xdf, 0xff,
	0xcf, 0x6d, 0xf1, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xcf, 0x43, 0xcb, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xcf, 0x80, 0x82, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xe7, 0x90, 0x05, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xe7, 0xa7, 0xf9, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xf7, 0xb8, 0x06, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xfb, 0x70, 0xe7, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xfc, 0xf5, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void setup() {
	// wire initialization
	Wire.begin();
	Wire.setClock(400000);
	// servo initailization. 
	mainServo.attach(9, 1000, 2000);
	mainServo.write(90);
	// scale initialization
	//mainreadSystemSettings();
	mainScale.setSampleRate(NAU7802_SPS_320);
	mainScale.calibrateAFE();
	// logo routine
	display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
	display.clearDisplay();
	display.drawBitmap(0, 0, helloWorld, 128, 64, SSD1306_WHITE); // display.drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
	display.display();
	delay(2000);
	display.clearDisplay();
	display.display();

	setTime(0);
}

void loop() {
	initializeScreen();
	display.setCursor(40, 10);
	if (!tFin) {
		display.print(constructTime());
		display.display();
	}
	else {
		if (second() == 1) {
			display.print("Done");
		}
		else if (second() == 2) {
			display.print("    ");
			setTime(0);
		}
		display.display();
	}
}

void initializeScreen() {
	display.clearDisplay();
	display.setTextSize(2);
	display.setTextColor(WHITE);
	display.setCursor(0, 0);
	display.drawLine(0, 0, display.width()-1, 0, SSD1306_WHITE);
	display.drawLine(0, display.height()-1, display.width()-1, display.height()-1, SSD1306_WHITE);
}
String constructTime() {
	if (sixty) {
		delay(1001);
		minT++;
		sixty = false;
	}
	int t = second();
	String separator = ":";
	String displaySec = String(rSec);
	String displayMin = String(timerMin - minT);
	if (fRun) {
		displayMin = "5";
		fRun = false;
	}
	if (rSec < 10) {
		separator += "0";
	}
	if (rSec == 60) {
		displaySec = "00";
		sixty = true;
	}
	if (rSec == 60 && minT == timerMin) {
		tFin = true;
		setTime(0);
	}
	return displayMin + separator + displaySec;
}
void tripAlarm() {
	
}